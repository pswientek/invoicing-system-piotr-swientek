/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

buildscript {
    ext{
        lombokVersion = '1.18.20'
        spockVersion = '2.1-groovy-3.0'
        springBootVersion = '2.7.3'
        springDependencyManagmentVersion = '1.0.12.RELEASE'
        springFoxUiVersion = '3.0.0'
        springFoxStarterVersion = '3.0.0'
        flywayVersion = '8.5.13'
        postgresVersion = '42.4.2'
        h2Version = '1.4.200'
        mongoVersion = '3.12.11'
    }
}


plugins {
    id 'java'
    id 'groovy'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagmentVersion}"
    id 'org.flywaydb.flyway' version "${flywayVersion}"
}

group = 'pl.futurecollars'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:"
    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.mongodb:mongo-java-driver:${mongoVersion}"

    runtimeOnly "com.h2database:h2:${h2Version}"
    runtimeOnly "org.postgresql:postgresql:${postgresVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
 }

jacocoTestCoverageVerification {
    executionData tasks.withType(Test)
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.90
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['pl/futurecollars/invoicing/InvoicingSystemApplication.class',
                                        'pl/futurecollars/invoicing/config/DatabaseConfiguration.class'])
        }))
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

check {
    finalizedBy jacocoTestReport
}

check {
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    executionData tasks.withType(Test)
    dependsOn check
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

task testWithFileDatabase(type: Test) {
    useJUnitPlatform() {
        systemProperty "spring.profiles.active", "file"
    }
}

task testWithMemoryDatabase(type: Test) {
    useJUnitPlatform() {
        systemProperty "spring.profiles.active", "memory"
    }
}

task testWithSqlDatabase(type: Test) {
    useJUnitPlatform() {
        systemProperty "spring.profiles.active", "sql"
    }
}

task testWithJpaDatabase(type: Test) {
    useJUnitPlatform() {
        systemProperty "spring.profiles.active", "jpa"
    }
}

task testWithMongoDatabase(type: Test) {
    useJUnitPlatform() {
        systemProperty "spring.profiles.active", "mongo"
    }
}

check.dependsOn testWithFileDatabase
check.dependsOn testWithMemoryDatabase
check.dependsOn testWithSqlDatabase
check.dependsOn testWithJpaDatabase
check.dependsOn testWithMongoDatabase

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Werror"
}